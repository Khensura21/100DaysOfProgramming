/#Day30
//#100DaysOfProgramming
//Time Spent: 60 mins
//Summary of Challenge: Given a binary tree and a sum, 
//determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
//Thoughts: I was very close to the solution, I just had the inverse approach, I tried to add, and the actually approach was 
//subtract. I also had a challenging time figuring out how to return things from the recursive functions and when to use helper 
//and when not to use a helper function. I need to drill these things!

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {boolean}
 */
var hasPathSum = function(root, sum) {
    if (!root) return false;
    
    if (!root.left  && !root.right && sum - root.val == 0) return true
    
    return hasPathSum(root.left, sum - root.val) || hasPathSum (root.right, sum - root.val)
    
};

// runtime : O(n)
// spacetime: O(n)
