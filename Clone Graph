/**
 * // Definition for a Node.
 * function Node(val, neighbors) {
 *    this.val = val === undefined ? 0 : val;
 *    this.neighbors = neighbors === undefined ? [] : neighbors;
 * };
 */
/**
 * @param {Node} node
 * @return {Node}
 */
// Graph Traversal-- BFS implementation (using a queue)
var cloneGraph = function(node) {
    
    if (!node) return node;
    let queue = [node];
    let visited = new Map();
    let startVertex = new Node(node.val, []);
    visited.set(node, startVertex);
     
    while (queue.length !== 0) {
        let currVertex = queue.shift();
        currVertex.neighbors.forEach(neighbor => {
            if (!visited.has(neighbor)) {
                visited.set(neighbor, new Node(neighbor.val, []));
                queue.push(neighbor)
            }
            visited.get(currVertex).neighbors.push(visited.get(neighbor))
       })
    }
   
    return visited.get(node)
};

