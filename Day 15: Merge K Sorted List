//#Day15
//#100DaysOfProgramming
//Time Spent: 70 mins
//Summary of Challenge: Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.


var mergeKLists = function(lists) {
    //Brute force method
    //create an array to store all values of k linked list
    
    let nodeList = [];
    
    //go traverse each LL and get each node value
    for (let i = 0; i < lists.length; i++) {
        while (lists[i] != null){
            nodeList.push(lists[i].val);
            lists[i] = lists[i].next
        }
    }
    //sort the nodelist
    nodeList.sort((a,b) => a-b);
    
    //create dummyNode
    let dumNode = new ListNode(null);
    let node = dumNode;
    
    //Build a new Link List based on the sorted vals
   nodeList.forEach(val => {
       let newNode = new ListNode(val);
       node.next = newNode;
       node = newNode;
   })
    
    //return answer
    return dumNode.next;
    
};
//runtime: O(Nk* NlogN * N)
// - Nk : The time it cost to build the Nodelist, N, the length of list, and k the length of each node
// -NlogN: Time it cost for a stable sorting algorithim
// N: Time it cost to build the returned Linked list

//spacetime: O(n), where n is length of returned Linked List
