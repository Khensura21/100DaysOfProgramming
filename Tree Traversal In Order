/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */

// 1. Iterative Version
var inorderTraversal = function(root) {
    let curr = root;
    let stack = [];  curr = null
    let visited = [1,3,2];    
    while(curr || stack.length !== 0){
        while(curr){
            stack.push(curr);
            curr = curr.left;
        }
        curr = stack.pop();
        visited.push(curr.val);
        curr = curr.right;
    }
    return visited;

runtime: O(n), where n is number of nodes
space complexity: O(n) , where n is number
    
//     // 2. Recursive Version
//     if(!root) return [];
//     let visited = [];
//     //call helper function
    
    
//     function helper(node)  {
//         if (node != null) {
//             if(node.left) helper(node.left)
//             visited.push(node.val);
//             if(node.right) helper(node.right)
//         }
//     }
//     helper(root);
//     return visited

//runtime: O(n), due to you having to visit each node at least once
//space complexity: O(n) worst, but O(log n) 
    
}; 


